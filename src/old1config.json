{
    "gpt_3.5_model": "gpt-3.5-turbo-0125",
    "gpt_4_model": "gpt-4o",
    "gpt_temperature": 0,
    "gpt_top_p": 1,
    "gpt_max_tokens": 3000,
    "system_prompt_code": "You are an expert Cypress Test Automation Engineer and you follow cypress coding best practices",
    "zero_shot_code": "write step definition and page object class implementation using cypress javascript and @badeball/cypress-cucumber-preprocessor library for the given feature - ",
    "few_shot_assistant_feature_code": [
      "**Feature file - login.feature**",
      "Feature: Login Page",
      "",
      "  As a user",
      "  I want to test",
      "  All basic scenarios for login Page",
      "",
      "  Scenario: Login with valid credentials",
      "    Given I am on the login screen",
      "    When I fill the login form with valid credentials",
      "    Then I should be able to see the home screen",
      "",
      "  Scenario: login using invaild credentials",
      "    Given I am on the login screen",
      "    When I fill the login form with invalid credentials",
      "    Then I should see error \"Epic sadface: Username and password do not match any user in this service\"",
      "",
      "  Scenario: login using empty credentials",
      "    Given I am on the login screen",
      "    When I fill the login form with empty credentials",
      "    Then I should see error \"Epic sadface: Username and password do not match any user in this service\"",
      "",
      "  Scenario: login using vaild user but invaild password credentials",
      "    Given I am on the login screen",
      "    When I fill the login form with vaild user but invaild password credentials",
      "    Then I should see error \"Epic sadface: Username and password do not match any user in this service\"",
      "",
      "  Scenario: login using invaild user but vaild password credentials",
      "    Given I am on the login screen",
      "    When I fill the login form with invaild user but vaild password credentials",
      "    Then I should see error \"Epic sadface: Username and password do not match any user in this service\""
    ],
    "few_shot_assistant_step_code": [
      "// step definitions - login-step.js",
      "const { Given, When, Then } = require('@cucumber/cucumber');",
      "const { LoginPage } = require('../page-objects/login-page');",
      "const loginPage = new LoginPage();",
      "",
      "Given('I am on the login screen', async function() {",
      "  await loginPage.navigateToLoginScreen();",
      "  await loginPage.verifyLoginPageIsDisplayed();",
      "});",
      "",
      "When('I fill the login form with valid credentials', async function() {",
      "  await loginPage.submitLoginForm();",
      "});",
      "",
      "When('I fill the login form with invalid credentials', async function() {",
      "  await loginPage.submitLoginFormWrongUserCred();",
      "});",
      "",
      "When('I fill the login form with empty credentials', async function() {",
      "  await loginPage.submitLoginFormUsingEmptyCred();",
      "});",
      "",
      "When('I fill the login form with vaild user but invaild password credentials', async function() {",
      "  await loginPage.submitLoginFormUsingVaildUserButWrongPassword();",
      "});",
      "",
      "When('I fill the login form with invaild user but vaild password credentials', async function() {",
      "  await loginPage.submitLoginFormUsingWrongUserVaildPassword();",
      "});",
      "",
      "Then('I should be able to see the home screen', async function() {",
      "  await loginPage.verifyAfterLoginPage();",
      "});",
      "",
      "Then('I should see error {string}', async function(errorMsg) {",
      "  await loginPage.verifyErrorMsg(errorMsg);",
      "});"
    ],
    "few_shot_assistant_page_code": [
      "// page object class - login-page.js",
      "const locators = {",
      "  username_input: '#user-name',",
      "  password_input: '#password',",
      "  login_button: '#login-button',",
      "  inventory_container: '#inventory_container',",
      "  error: '[data-test=\"error\"]'",
      "};",
      "",
      "class LoginPage {",
      "  async navigateToLoginScreen() {",
      "    return await page.goto(global.BASE_URL);",
      "  }",
      "",
      "  async verifyLoginPageIsDisplayed() {",
      "    return expect(await page.title()).to.equal('Swag Labs');",
      "  }",
      "",
      "  async submitLoginForm() {",
      "    await page.waitForSelector(locators.username_input);",
      "    await page.fill(locators.username_input, 'standard_user');",
      "    await page.fill(locators.password_input, 'secret_sauce');",
      "    await page.click(locators.login_button);",
      "  }",
      "",
      "  async submitLoginFormWrongUserCred() {",
      "    await page.waitForSelector(locators.username_input);",
      "    await page.fill(locators.username_input, '7656787654');",
      "    await page.fill(locators.password_input, '76545678876');",
      "    await page.click(locators.login_button);",
      "  }",
      "",
      "  async submitLoginFormUsingEmptyCred() {",
      "    await page.waitForSelector(locators.username_input);",
      "    await page.fill(locators.username_input, '');",
      "    await page.fill(locators.password_input, '');",
      "    await page.click(locators.login_button);",
      "  }",
      "",
      "  async submitLoginFormUsingVaildUserButWrongPassword() {",
      "    await page.waitForSelector(locators.username_input);",
      "    await page.fill(locators.username_input, 'standard_user');",
      "    await page.fill(locators.password_input, 'weverve');",
      "    await page.click(locators.login_button);",
      "  }",
      "",
      "  async submitLoginFormUsingWrongUserVaildPassword() {",
      "    await page.waitForSelector(locators.username_input);",
      "    await page.fill(locators.username_input, 'frebrerb43');",
      "    await page.fill(locators.password_input, 'secret_sauce');",
      "    await page.click(locators.login_button);",
      "  }",
      "",
      "  async verifyAfterLoginPage() {",
      "    await page.waitForSelector(locators.inventory_container);",
      "    const visible = await page.isVisible(locators.inventory_container);",
      "    return expect(visible).to.equal(true);",
      "  }",
      "",
      "  async verifyErrorMsg(error) {",
      "    await page.waitForSelector(locators.error);",
      "    const errorMsg = await page.locator(locators.error).innerText();",
      "    return expect(errorMsg.includes(error)).to.equal(true,",
      "      `Was looking for text: ${error} but did not find it. Found text: ${errorMsg}`",
      "    );",
      "  }",
      "}",
      "",
      "module.exports = { LoginPage };"
    ]
  }
  